Method 3 (Using Recursion) 
Merge is one of those nice recursive problems where the recursive solution code is much cleaner than the iterative code. You probably wouldnâ€™t want to use the recursive version for production code, however, because it will use stack space which is proportional to the length of the lists.  

class GFG
{
    public Node SortedMerge(Node A, Node B)
    {
     
        if(A == null) return B;
        if(B == null) return A;
         
        if(A.data < B.data)
        {
            A.next = SortedMerge(A.next, B);
            return A;
        }
        else
        {
            B.next = SortedMerge(A, B.next);
            return B;
        }
         
    }
}
 
// This code is contributed by Tuhin Das

 
Time Complexity:  Since we are traversing through the two lists fully. So, the time complexity is O(m+n) where m and n are the lengths of the two lists to be merged. 
