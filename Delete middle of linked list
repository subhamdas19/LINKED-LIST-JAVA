Efficient solution: 
Approach: The above solution requires two traversals of the linked list. The middle node can delete using one traversal. The idea is to use two pointers, slow_ptr, and fast_ptr. Both pointers start from the head of list. When fast_ptr reaches the end, slow_ptr reaches middle. This idea is same as the one used in method 2 of this post. The additional thing in this post is to keep track of the previous middle so the middle node can be deleted.

Below is the implementation.  

// Java program to delete the
// middle of a linked list
class GfG {
 
    /* Link list Node */
    static class Node {
        int data;
        Node next;
    }
 
    // Deletes middle node and returns
    // head of the modified list
    static Node deleteMid(Node head)
    {
        // Base cases
        if (head == null)
            return null;
        if (head.next == null) {
            return null;
        }
 
        // Initialize slow and fast pointers
        // to reach middle of linked list
        Node slow_ptr = head;
        Node fast_ptr = head;
 
        // Find the middle and previous of middle.
        Node prev = null;
 
        // To store previous of slow_ptr
        while (fast_ptr != null
&& fast_ptr.next != null) {
            fast_ptr = fast_ptr.next.next;
            prev = slow_ptr;
            slow_ptr = slow_ptr.next;
        }
 
        // Delete the middle node
        prev.next = slow_ptr.next;
 
        return head;
    }
 
    // A utility function to print
// a given linked list
    static void printList(Node ptr)
    {
        while (ptr != null) {
            System.out.print(ptr.data + "->");
            ptr = ptr.next;
        }
        System.out.println("NULL");
    }
 
    // Utility function to create a new node.
    static Node newNode(int data)
    {
        Node temp = new Node();
        temp.data = data;
        temp.next = null;
        return temp;
    }
 
    /* Driver code*/
    public static void main(String[] args)
    {
        /* Start with the empty list */
        Node head = newNode(1);
        head.next = newNode(2);
        head.next.next = newNode(3);
        head.next.next.next = newNode(4);
 
        System.out.println("Gven Linked List");
        printList(head);
 
        head = deleteMid(head);
 
        System.out.println("Linked List after deletion of middle");
        printList(head);
    }
}
 
// This code is contributed by Prerna saini.
Output: 

Gven Linked List
1->2->3->4->NULL
Linked List after deletion of middle
1->2->4->NULL

 

Complexity Analysis: 

    Time Complexity: O(n). 
    Only one traversal of the linked list is needed
    Auxiliary Space: O(1). 
    As no extra space is needed.
